library(tidytext)
library(tidyverse)
library(readxl)
library(patchwork)
Plot_Kommentare <- function(){
return(
plot(1, type = "n", xlim = c(0, 1), ylim = c(0, length(df$Kommentar[complete.cases(df$Kommentar)]) + 1),
xlab = "", ylab = "", main = "Kommentare", axes = FALSE) +
for (i in 1:length(df$Kommentar[complete.cases(df$Kommentar)])) {
wrapped_text <- strwrap(df$Kommentar[complete.cases(df$Kommentar)][i], width = 90)  # Adjust the width as needed
for (j in 1:length(wrapped_text)) {
text(x = 0.5, y = i - j * 0.2, labels = wrapped_text[j], adj = 0.5)
}
}
)
}
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
Plot_Termin / Plot_Termin_online
Plot_kurzetut # eine Person hat im Kommentar offenbart, die Idee falsch verstanden zu haben
Plot_uebungszettel
Plot_Notenziel
Plot_Lernstrategie
Plot_Kommentare()
# Die Personen die sich sicher fühlen kommen weniger ins tutorium:
plot(as.numeric(df$regelmaessige_teilnahme), as.numeric(df$Punkteziel),
xlim = c(1,5), ylim = c(1,15)) +
abline(lm(as.numeric(df$Punkteziel) ~ as.numeric(df$regelmaessige_teilnahme)), col = "red")
Teilnehmer_Stud.IP <- 41
df <- as.data.frame(read_xlsx("data.xlsx"))
# cleaning pipe
df <- df %>%
select(-CASE, -REF, -SERIAL,
-QUESTNNR, -MODE, -Q_VIEWER,
-LASTPAGE) %>%
mutate(regelmaessige_teilnahme = factor(df$regelmaessige_teilnahme,
levels = c(1, 2, 3, 4, 5),
labels = c("1 (keine regelmässige Teilnahme)",
"2", "3", "4", "5 (regelmässige Teilnahme)")
)) %>%
mutate(kurze_tut = factor(df$kurze_tut,
levels = c(1, 2, 3, 4, 5),
labels = c("1 (starke Ablehnung)",
"2", "3", "4", "5 (starke Zustimmung)")
)) %>%
mutate(uebungszettel = uebungszettel_good_idea * uebungszettel_bearbeiten) %>%
mutate(Punkteziel_factor = factor(df$Punkteziel, levels = c(1:15),
labels = as.character(c(1:15)))) %>%
mutate(Lernstrategie_factor = factor(df$Lernstrategie,
levels = c(1, 2, 3, 4, 5),
labels = c("Über beide Semester wöchentlich (Zwei Semester vor der Klausur)",
"Anfang nächstes Semester (Ein Semester vor der Klausur)",
"Mitte nächstes Semester (Ein halbes Semester vor der Klausur)",
"Ein paar Wochen vor der Klausur", "Sonstiges: ___")))
library(tidyverse)
library(readxl)
library(patchwork)
Plot_Kommentare <- function(){
return(
plot(1, type = "n", xlim = c(0, 1), ylim = c(0, length(df$Kommentar[complete.cases(df$Kommentar)]) + 1),
xlab = "", ylab = "", main = "Kommentare", axes = FALSE) +
for (i in 1:length(df$Kommentar[complete.cases(df$Kommentar)])) {
wrapped_text <- strwrap(df$Kommentar[complete.cases(df$Kommentar)][i], width = 90)  # Adjust the width as needed
for (j in 1:length(wrapped_text)) {
text(x = 0.5, y = i - j * 0.2, labels = wrapped_text[j], adj = 0.5)
}
}
)
}
################################################################################
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
df <- as.data.frame(read_xlsx("data.xlsx"))
# cleaning pipe
df <- df %>%
select(-CASE, -REF, -SERIAL,
-QUESTNNR, -MODE, -Q_VIEWER,
-LASTPAGE) %>%
mutate(regelmaessige_teilnahme = factor(df$regelmaessige_teilnahme,
levels = c(1, 2, 3, 4, 5),
labels = c("1 (keine regelmässige Teilnahme)",
"2", "3", "4", "5 (regelmässige Teilnahme)")
)) %>%
mutate(kurze_tut = factor(df$kurze_tut,
levels = c(1, 2, 3, 4, 5),
labels = c("1 (starke Ablehnung)",
"2", "3", "4", "5 (starke Zustimmung)")
)) %>%
mutate(uebungszettel = uebungszettel_good_idea * uebungszettel_bearbeiten) %>%
mutate(Punkteziel_factor = factor(df$Punkteziel, levels = c(1:15),
labels = as.character(c(1:15)))) %>%
mutate(Lernstrategie_factor = factor(df$Lernstrategie,
levels = c(1, 2, 3, 4, 5),
labels = c("Über beide Semester wöchentlich (Zwei Semester vor der Klausur)",
"Anfang nächstes Semester (Ein Semester vor der Klausur)",
"Mitte nächstes Semester (Ein halbes Semester vor der Klausur)",
"Ein paar Wochen vor der Klausur", "Sonstiges: ___")))
#################
# PLOT TUTORIUM #
#################
# Subset Termin Questions
termin <- df %>%
select(Termin_, Termin_1, Termin_9,
Termin_2, Termin_3, Termin_4,
Termin_5,Termin_6,Termin_7, Termin_8)
termin_long <- termin %>%
rename(
Mi_8_10 = Termin_,
Mi_10_12 = Termin_1,
Mi_1430_1630 = Termin_9,
Do_14_16 = Termin_2,
Do_16_18 = Termin_3,
Fr_8_10 = Termin_4,
Fr_10_12 = Termin_5,
Fr_12_14 = Termin_6,
Fr_14_16 = Termin_7,
Fr_16_18 = Termin_8
) %>%
mutate_all(list(~ ifelse(. == 1, 1, ifelse(. == 2, 0, .)))) %>%
mutate(ID = row_number()) %>%
gather(date_column, availability, -ID) %>%
filter(!is.na(availability) & availability == 1)
termin_long$date_column <- fct_reorder(termin_long$date_column,
ave(termin_long$availability,
termin_long$date_column, FUN = sum))
Plot_Termin <- ggplot(termin_long, aes(x = reorder(date_column, -availability), fill = factor(availability))) +
geom_bar(stat = "count") +
scale_fill_manual(values = "darkmagenta") +
labs(x = "Code für möglichen Zeitraum",y = "Anzahl Studierende",fill = "Verfügbarkeit") +
theme_minimal() +
ggtitle("Wähle alle Zeiten aus, in denen du vor Ort ein Tutorium besuchen könntest.") +
coord_flip() +
theme(legend.position = "none") +
scale_y_continuous(limits = c(0, Teilnehmer_Stud.IP))
Plot_Termin
termin_online <- df %>%
select(Termin_online_  , Termin_online_1 , Termin_online_8 ,
Termin_online_9 , Termin_online_2 , Termin_online_3 ,
Termin_online_4 , Termin_online_5 , Termin_online_6 ,
Termin_online_7 , Termin_online_10, Termin_online_11)
termin_online_long <- termin_online %>%
rename(
Mi_8_10 = Termin_online_,
Do_08_10 = Termin_online_1,
Do_12_14 = Termin_online_8,
Do_14_16 = Termin_online_9,
Do_16_18 = Termin_online_2,
Fr_08_10 = Termin_online_3,
Fr_10_12 = Termin_online_4,
Fr_12_14 = Termin_online_5,
Fr_14_16 = Termin_online_6,
Fr_16_18 = Termin_online_7,
Fr_18_20 = Termin_online_10,
Sa_13_15 = Termin_online_11
) %>%
mutate_all(list(~ ifelse(. == 1, 1, ifelse(. == 2, 0, .)))) %>%
mutate(ID = row_number()) %>%
gather(date_column, availability, -ID) %>%
filter(!is.na(availability) & availability == 1)
termin_online_long$date_column <- fct_reorder(termin_online_long$date_column,
ave(termin_online_long$availability,
termin_online_long$date_column, FUN = sum))
Plot_Termin_online <- ggplot(termin_online_long,aes(x = reorder(date_column, -availability), fill = factor(availability))) +
geom_bar(stat = "count") +
ggtitle("Wähle alle Zeiten aus, in denen du ein Online-Tutorium besuchen könntest.") +
labs(x = "Code für möglichen Zeitraum",y = "Anzahl Studierende",fill = "Verfügbarkeit") +
theme_minimal() +
scale_fill_manual(values = "darkmagenta") +
coord_flip() +
theme(legend.position = "none") +
scale_y_continuous(limits = c(0, Teilnehmer_Stud.IP))
Plot_Termin / Plot_Termin_online
Plot_regelmäßigeTeilnahme <- ggplot(df, aes(x=regelmaessige_teilnahme)) +
geom_bar(fill = "darkred") +
labs(x = "",
y = "Häufigkeit",
title = "Bitte gib an, inwieweit du planst, das Tutorium zur VL Statistik 1 regelmäßig zu besuchen."
) +
theme_minimal() +
scale_x_discrete(limits = levels(df$regelmaessige_teilnahme))+
geom_text(stat = "count", aes(label = ..count..),
vjust = 1.5, color = "white", size = 5)
Plot_regelmäßigeTeilnahme
dfsub <- df %>%
filter(regelmaessige_teilnahme %in% c("4", "5 (regelmässige Teilnahme)"))
terminsub <- dfsub %>%
select(Termin_, Termin_1, Termin_9,
Termin_2, Termin_3, Termin_4,
Termin_5,Termin_6,Termin_7, Termin_8)
terminsub_long <- terminsub %>%
rename(
Mi_8_10 = Termin_,
Mi_10_12 = Termin_1,
Mi_1430_1630 = Termin_9,
Do_14_16 = Termin_2,
Do_16_18 = Termin_3,
Fr_8_10 = Termin_4,
Fr_10_12 = Termin_5,
Fr_12_14 = Termin_6,
Fr_14_16 = Termin_7,
Fr_16_18 = Termin_8
) %>%
mutate_all(list(~ ifelse(. == 1, 1, ifelse(. == 2, 0, .)))) %>%
mutate(ID = row_number()) %>%
gather(date_column, availability, -ID) %>%
filter(!is.na(availability) & availability == 1)
terminsub_long$date_column <- fct_reorder(terminsub_long$date_column,
ave(terminsub_long$availability,
terminsub_long$date_column, FUN = sum))
Plot_Terminsub <- ggplot(terminsub_long, aes(x = reorder(date_column, -availability), fill = factor(availability))) +
geom_bar(stat = "count") +
scale_fill_manual(values = "darkmagenta") +
labs(x = "Code für möglichen Zeitraum",y = "Anzahl Studierende",fill = "Verfügbarkeit",
subtitle = "Nur die Personen, die regelmässig kommen wollen") +
theme_minimal() +
ggtitle("Wähle alle Zeiten aus, in denen du vor Ort ein Tutorium besuchen könntest.") +
coord_flip() +
theme(legend.position = "none") +
scale_y_continuous(limits = c(0, Teilnehmer_Stud.IP))
terminsub_online <- dfsub %>%
select(Termin_online_  , Termin_online_1 , Termin_online_8 ,
Termin_online_9 , Termin_online_2 , Termin_online_3 ,
Termin_online_4 , Termin_online_5 , Termin_online_6 ,
Termin_online_7 , Termin_online_10, Termin_online_11)
terminsub_online_long <- terminsub_online %>%
rename(
Mi_8_10 = Termin_online_,
Do_08_10 = Termin_online_1,
Do_12_14 = Termin_online_8,
Do_14_16 = Termin_online_9,
Do_16_18 = Termin_online_2,
Fr_08_10 = Termin_online_3,
Fr_10_12 = Termin_online_4,
Fr_12_14 = Termin_online_5,
Fr_14_16 = Termin_online_6,
Fr_16_18 = Termin_online_7,
Fr_18_20 = Termin_online_10,
Sa_13_15 = Termin_online_11
) %>%
mutate_all(list(~ ifelse(. == 1, 1, ifelse(. == 2, 0, .)))) %>%
mutate(ID = row_number()) %>%
gather(date_column, availability, -ID) %>%
filter(!is.na(availability) & availability == 1)
terminsub_online_long$date_column <- fct_reorder(terminsub_online_long$date_column,
ave(terminsub_online_long$availability,
terminsub_online_long$date_column, FUN = sum))
Plot_Terminsub_online <- ggplot(terminsub_online_long,aes(x = reorder(date_column, -availability), fill = factor(availability))) +
geom_bar(stat = "count") +
ggtitle("Wähle alle Zeiten aus, in denen du ein Online-Tutorium besuchen könntest.") +
labs(x = "Code für möglichen Zeitraum",y = "Anzahl Studierende",fill = "Verfügbarkeit",
subtitle = "Nur die Personen, die regelmässig kommen wollen") +
theme_minimal() +
scale_fill_manual(values = "darkmagenta") +
coord_flip() +
theme(legend.position = "none") +
scale_y_continuous(limits = c(0, Teilnehmer_Stud.IP))
Plot_Terminsub / Plot_Terminsub_online
Plot_kurzetut <- ggplot(df, aes(x=kurze_tut)) +
geom_bar(fill = "navy") +
labs(x = "Zustimmung",
y = "Häufigkeit",
title = "Statt ein 2h-Tutorium pro Woche wären zwei Tutorien, die nur 1h20min lang sind, besser"
) +
theme_minimal() +
scale_x_discrete(limits = levels(df$kurze_tut))+
geom_text(stat = "count", aes(label = ..count..),
vjust = 1.5, color = "white", size = 5)
Plot_kurzetut
Plot_uebungszettel <- ggplot(df, aes(x=uebungszettel)) +
geom_bar(fill = "navy") +
labs(x = "SEU (Subjective Expected Utility",
y = "Häufigkeit",
title = "[Wert × Erwartung] zu wöchentlichen Übungszetteln für Zuhause",
subtitle = "Hält Übungszettel für eine gute Idee × Würde Übungszettel bearbeiten"
) +
theme_minimal() +
scale_x_continuous(limits = c(0,25))+
geom_text(stat = "count", aes(label = ..count..),
vjust = 1.5, color = "white", size = 5)
Plot_uebungszettel
plot(df$uebungszettel_bearbeiten, df$uebungszettel_good_idea, main = "Scatterplot with Correlation Line",
xlab = "uebungszettel_bearbeiten", ylab = "uebungszettel_good_idea", xlim = c(1, 5), ylim = c(1, 5))+
abline(lm(df$uebungszettel_good_idea ~ df$uebungszettel_bearbeiten), col = "red") +
abline(v=mean(df$uebungszettel_bearbeiten, na.rm=TRUE),col="blue")+
abline(h=mean(df$uebungszettel_good_idea, na.rm=TRUE),col="blue")
Plot_Notenziel <- ggplot(df, aes(x=Punkteziel_factor)) +
geom_bar(fill = "sienna3") +
labs(x = "angestrebte Note",
y = "Häufigkeit",
title = "Welche Punktzahl strebst du in der Klausur (erst nächstes Semester) an?",
subtitle = paste("nicht beantwortet: ",sum(!is.na(df$Punkteziel_factor)),
" | Antworten insg.: ", length(df$Punkteziel_factor), " | ",
round((sum(is.na(df$Punkteziel_factor))/length(df$Punkteziel_factor))*100,2),
"% der Umfrageteilnehmenden beantworteten die Frage",sep="")
) +
theme_minimal() +
scale_x_discrete(limits = levels(df$Punkteziel_factor))+
geom_text(stat = "count", aes(label = ..count..),
vjust = 1.5, color = "white", size = 5)
Plot_Notenziel
Plot_Lernstrategie <- ggplot(df, aes(x=Lernstrategie_factor)) +
geom_bar(fill = "sienna3") +
labs(x = "",
y = "Häufigkeit",
title = "Wann planst du mit dem lernen für die Klausur zu beginnen?",
subtitle = paste("nicht beantwortet: ",sum(!is.na(df$Lernstrategie_factor)),
" | Antworten insg.: ", length(df$Lernstrategie_factor), " | ",
round((sum(is.na(df$Lernstrategie_factor))/length(df$Lernstrategie_factor))*100,2),
"% der Umfrageteilnehmenden beantworteten die Frage",sep="")
) +
theme_minimal() +
scale_x_discrete(limits = rev(levels(df$Lernstrategie_factor)))+
geom_text(stat = "count", aes(label = ..count..),
hjust = 2, color = "white", size = 5) +
coord_flip()
Plot_Lernstrategie
vec_Lernstrategie <- df$Lernstrategie
vec_Lernstrategie[vec_Lernstrategie == 5] <- NA
plot(vec_Lernstrategie, df$Punkteziel,
main = "Scatterplot with Correlation Line",
xlab = "Lernstrategie (1 = 2 Semester/ 4 = ein paar Wochen vor der Klausur", ylab = "Punkteziel",
xlim = c(1, 4), ylim = c(1, 15)
) +
abline(lm(df$Punkteziel ~ vec_Lernstrategie), col = "red") +
abline(v=mean(vec_Lernstrategie, na.rm=TRUE),col="blue")+
abline(h=mean(df$Punkteziel, na.rm=TRUE),col="blue")
df$Kommentar[complete.cases(df$Kommentar)]
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
Plot_Termin / Plot_Termin_online
Plot_kurzetut # eine Person hat im Kommentar offenbart, die Idee falsch verstanden zu haben
Plot_uebungszettel
Plot_Notenziel
Plot_uebungszettel
Plot_Notenziel
Plot_Notenziel
Plot_Lernstrategie
Plot_Kommentare()
# Die Personen die sich sicher fühlen kommen weniger ins tutorium:
plot(as.numeric(df$regelmaessige_teilnahme), as.numeric(df$Punkteziel),
xlim = c(1,5), ylim = c(1,15)) +
abline(lm(as.numeric(df$Punkteziel) ~ as.numeric(df$regelmaessige_teilnahme)), col = "red")
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
Plot_Termin / Plot_Termin_online
library(tidyverse)
library(readxl)
library(patchwork)
Plot_Kommentare <- function(){
return(
plot(1, type = "n", xlim = c(0, 1), ylim = c(0, length(df$Kommentar[complete.cases(df$Kommentar)]) + 1),
xlab = "", ylab = "", main = "Kommentare", axes = FALSE) +
for (i in 1:length(df$Kommentar[complete.cases(df$Kommentar)])) {
wrapped_text <- strwrap(df$Kommentar[complete.cases(df$Kommentar)][i], width = 90)  # Adjust the width as needed
for (j in 1:length(wrapped_text)) {
text(x = 0.5, y = i - j * 0.2, labels = wrapped_text[j], adj = 0.5)
}
}
)
}
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
Plot_Termin / Plot_Termin_online
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
Plot_Termin / Plot_Termin_online
Plot_kurzetut # eine Person hat im Kommentar offenbart, die Idee falsch verstanden zu haben
Plot_uebungszettel
Plot_Notenziel
Plot_Lernstrategie
Plot_Kommentare()
# Die Personen die sich sicher fühlen kommen weniger ins tutorium:
plot(as.numeric(df$regelmaessige_teilnahme), as.numeric(df$Punkteziel),
xlim = c(1,5), ylim = c(1,15)) +
abline(lm(as.numeric(df$Punkteziel) ~ as.numeric(df$regelmaessige_teilnahme)), col = "red")
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
Plot_Termin / Plot_Termin_online
Plot_Termin / Plot_Termin_online
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
Plot_Termin / Plot_Termin_online
Plot_kurzetut # eine Person hat im Kommentar offenbart, die Idee falsch verstanden zu haben
Plot_uebungszettel
Plot_Notenziel
# Die Personen die sich sicher fühlen kommen weniger ins tutorium:
plot(as.numeric(df$regelmaessige_teilnahme), as.numeric(df$Punkteziel),
xlim = c(1,5), ylim = c(1,15)) +
abline(lm(as.numeric(df$Punkteziel) ~ as.numeric(df$regelmaessige_teilnahme)), col = "red")
Plot_Lernstrategie
######### ALLE PLOTS #########
Plot_regelmäßigeTeilnahme
View(df)
cor(df)
View(df)
cor(as.numeric(df))
cor(as.numeric(df))
View(df)
View(dfsub)
?cor
cor(df$Punkteziel, df$Lernstrategie, na.rm=T)
cor(df$Punkteziel, df$Lernstrategie, na.rm=T)
cor(x = df$Punkteziel, y = df$Lernstrategie, na.rm=T)
cor(x = df$Punkteziel, y = df$Lernstrategie, na.rm = TRUE)
cor(x = df$Punkteziel, y = df$Lernstrategie)
cor(x = df$Punkteziel, y = df$Lernstrategie)
df2 <- na.omit(df)
rm(df2)
cor(x = na.omit(df$Punkteziel), y = na.omit(df$Lernstrategie))
cor(x = na.omit(df$Punkteziel), y = na.omit(df$Lernstrategie))
na.omit(df$Punkteziel)
?subset
df2 <- subset(Punkteziel = df$Punkteziel, Lernstrategie = df$Lernstrategie)
cor(x = df2$Punkteziel), y = df2$Lernstrategie)
df2 <- na.omit(df2)
cor(x = df2$Punkteziel), y = df2$Lernstrategie)
df2 <- subset(Punkteziel = df$Punkteziel, Lernstrategie = df$Lernstrategie)
df2 <- subset(Punkteziel = df$Punkteziel, Lernstrategie = df$Lernstrategie)
df2 <- subset(df, select(Punkteziel, Lernstrategie))
library(dplyr)
df2 <- subset(df, select(Punkteziel, Lernstrategie))
library(tidyverse)
df2 <- subset(df, select(Punkteziel, Lernstrategie))
df2 <- data.frame(Punkteziel = df$Punkteziel, Lernstrategie = df$Lernstrategie)
df2 <- na.omit(df2)
cor(x = df2$Punkteziel), y = df2$Lernstrategie)
cor(x = df2$Punkteziel, y = df2$Lernstrategie)
mycor <- function(x,y){
df2 <- data.frame(x = df$x, y = df$y)
df2 <- na.omit(df2)
return(cor(x = df2$x, y = df2$y))
}
View(df)
mycor(Punkteziel, uebungszettel_good_idea)
mycor(Punkteziel, uebungszettel_good_idea)
df2 <- data.frame(Punkteziel = df$Punkteziel, Lernstrategie = df$Lernstrategie)
df2 <- na.omit(df2)
cor(x = df2$Punkteziel, y = df2$Lernstrategie)
sample(df$Punkteziel, 5)
sample(1:41, 5)
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:41, 5)
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
?sample
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID <- sample(1:16, 5, )
cor(x = df2$Punkteziel[ID], y = df2$Lernstrategie[ID])
ID
table <- as.data.frame(df2$Punkteziel[ID],df2$Lernstrategie[ID])
table <- as.data.frame(df2$Punkteziel[ID],df2$Lernstrategie[ID])
table <- as.dataframe(df2$Punkteziel[ID],df2$Lernstrategie[ID])
table <- cbind(df2$Punkteziel[ID],df2$Lernstrategie[ID])
table
